<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Top on Jikky's Blog</title><link>https://jikky.dev/</link><description>Recent content in Top on Jikky's Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>© 2023 Jikky</copyright><lastBuildDate>Mon, 09 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://jikky.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>bit全探索についてココロから理解する</title><link>https://jikky.dev/post/bit-search/</link><pubDate>Mon, 09 Jan 2023 08:36:58 +0900</pubDate><guid>https://jikky.dev/post/bit-search/</guid><description>
&lt;p>競技プログラミングでアルゴリズムを初めて学ぶ人にとって最初の壁となるのがbit全探索だと思います。僕自身、初めて学んだアルゴリズムがbit全探索であり、色々苦労しました。&lt;/p>
&lt;p>この記事では、そのbit全探索について数学用語のみの簡潔な説明だけではなく、分かりやすく説明したいと思います。&lt;br>
なお、前提知識として &lt;strong>2進数・10進数の基本知識&lt;/strong> 、 &lt;strong>ビットの基本演算(シフト演算、AND演算)&lt;/strong> を理解していると、より理解が深まると思います。&lt;/p>
&lt;h2 id="はじめに">
&lt;a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
はじめに
&lt;/h2>
&lt;p>まず、bit全探索についてとても簡潔に説明すると以下のようになります。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>$N$ 個の要素を持つ集合 $\{0,1,2,\dots,N-1\}$ の部分集合の全列挙を行うアルゴリズム&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>「集合って何？部分集合の全列挙って何？」と思われた方がほとんどだと思いますが、安心してください。順を追って理解できるよう説明しますので、まずは簡単な例題で肩慣らしをしましょう。&lt;/p>
&lt;h3 id="まずは例題から">
&lt;a href="#%e3%81%be%e3%81%9a%e3%81%af%e4%be%8b%e9%a1%8c%e3%81%8b%e3%82%89" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
まずは例題から
&lt;/h3>
&lt;p>手始めにforループでも解ける簡単な全探索の問題を考えましょう。&lt;/p>
&lt;blockquote>
&lt;p>【問題】&lt;br>
3個の整数 $0,1,2$ が与えられたとき、その中からいくつか選ぶ方法を列挙せよ。&lt;/p>
&lt;/blockquote>
&lt;p>この問題はどのように全探索をすれば良いでしょうか。まず、3個ある整数ごとに選択肢としてその数字を &lt;strong>「選ぶ」「選ばない」&lt;/strong> の2通りの選択肢が存在します。 3個の整数 $0,1,2$ について&lt;/p>
&lt;ul>
&lt;li>$0$ を選ぶ or $0$ を選ばない&lt;/li>
&lt;li>$1$ を選ぶ or $1$ を選ばない&lt;/li>
&lt;li>$2$ を選ぶ or $2$ を選ばない&lt;/li>
&lt;/ul>
&lt;p>の選択肢が存在します。この3つの選択肢の組み合わせを全探索すればいいので、このような3重のforループを書くことにより全探索することができ、問題を解くことができました。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nl">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cnt&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code>1:
2: 0
3: 1
4: 0 1
5: 2
6: 0 2
7: 1 2
8: 0 1 2
&lt;/code>&lt;/pre>&lt;h2 id="結局bit全探索はなんなのか">
&lt;a href="#%e7%b5%90%e5%b1%80bit%e5%85%a8%e6%8e%a2%e7%b4%a2%e3%81%af%e3%81%aa%e3%82%93%e3%81%aa%e3%81%ae%e3%81%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
結局、bit全探索はなんなのか
&lt;/h2>
&lt;p>実は先程の例題はbit全探索の場合でも全く同じ方針で考えることができます。bit全探索は&lt;/p>
&lt;ul>
&lt;li>複数あるものから &lt;strong>「選ぶ」「選ばない」&lt;/strong> などの &lt;strong>2通りある選択肢の選び方がある場合&lt;/strong>、あり得る選び方を全探索しなければならない問題&lt;/li>
&lt;/ul>
&lt;p>に使うことができるのです！&lt;br>
先程は「3個の整数」から「選ぶ」「選ばない」の &lt;strong>2通りある選択肢の選び方&lt;/strong> を全列挙しましたが、ここで、最初に示した説明を分かりやすくするとこうなります。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>複数あるものから、「いくつか選ぶ方法」を全列挙して探索するアルゴリズム&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>「いくつか選ぶ方法」の全列挙というのは &lt;strong>複数あるものの各々について「選ぶ・選ばない」の組み合わせを全列挙する&lt;/strong> ということです。
bit全探索の正体は &lt;strong>&amp;ldquo;全探索&amp;quot;と名前についてある通り、 ただの全探索を行うだけ&lt;/strong> のアルゴリズムなのです！！！&lt;/p>
&lt;p>具体例として、先程の例題の3つの整数0, 1, 2をいくつか選ぶ方法は下図のように $2^3 = 8$ 通りの組み合わせがあります。一般に $N$ 個のものから、いくつか選ぶ方法は $2^N$ 通りありますので覚えておきましょう。&lt;/p>
&lt;figure>&lt;img src="image1.png" width="500px"/>
&lt;/figure>
&lt;h2 id="bit全探索の実装">
&lt;a href="#bit%e5%85%a8%e6%8e%a2%e7%b4%a2%e3%81%ae%e5%ae%9f%e8%a3%85" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
bit全探索の実装
&lt;/h2>
&lt;p>では、先程の例題をforループではなく、bit全探索で解いていきましょう。基本的にbit全探索を実装するときの方針は以下の通りです。&lt;/p>
&lt;blockquote>
&lt;p>💡 &lt;strong>方針&lt;/strong> &lt;br>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>「いくつか選ぶ方法」を2進数で表し、全探索しやすいように2進数→10進数に変換して整数値にする&lt;/strong>&lt;/li>
&lt;li>&lt;strong>整数値→2進数に再び変換し、「いくつか選ぶ方法」を復元する&lt;/strong>&lt;/li>
&lt;li>&lt;strong>復元した「いくつか選ぶ方法」について処理を行う&lt;/strong>&lt;/li>
&lt;li>&lt;strong>1-3を $2^N$ 通り全てに行う&lt;/strong>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>すなわち、&lt;/p>
&lt;ul>
&lt;li>複数のものから「いくつか選ぶ方法」( $\{0,2\}$ など)&lt;/li>
&lt;li>整数値( $5$ など)&lt;/li>
&lt;/ul>
&lt;p>を対応させることで全探索を簡単に行えるようにする、ということです！&lt;/p>
&lt;h3 id="いくつか選ぶ方法を2進数で表す">
&lt;a href="#%e3%81%84%e3%81%8f%e3%81%a4%e3%81%8b%e9%81%b8%e3%81%b6%e6%96%b9%e6%b3%95%e3%82%922%e9%80%b2%e6%95%b0%e3%81%a7%e8%a1%a8%e3%81%99" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
いくつか選ぶ方法を2進数で表す
&lt;/h3>
&lt;p>はじめに、「いくつか選ぶ方法」を2進数で表す方法を考えます。&lt;/p>
&lt;p>例えば、 $\{0,1,2\}$ に対して $\{1,2\}$ を選ぶ方法は&lt;/p>
&lt;ul>
&lt;li>1番目の $0$ : 選ばない&lt;/li>
&lt;li>2番目の $1$ : 選ぶ&lt;/li>
&lt;li>3番目の $2$ : 選ぶ&lt;/li>
&lt;/ul>
&lt;p>となっており、これを2進数で復元するとき &lt;strong>選ぶときを1、選ばないときを0&lt;/strong> とすると $N$ 桁の2進数で $011_{(2)}$ と表すことができます。つまり、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$i$ 番目のものを選ぶなら、2進数の $i$ 桁目を1にする&lt;/strong>&lt;/li>
&lt;li>&lt;strong>$i$ 番目のものを選ばないなら、2進数の $i$ 桁目を0にする&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>だけで「いくつか選ぶ方法」を2進数で表すことができるようになったのです！&lt;/p>
&lt;h3 id="2進数10進数の整数値に変換する">
&lt;a href="#2%e9%80%b2%e6%95%b010%e9%80%b2%e6%95%b0%e3%81%ae%e6%95%b4%e6%95%b0%e5%80%a4%e3%81%ab%e5%a4%89%e6%8f%9b%e3%81%99%e3%82%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
2進数→10進数の整数値に変換する
&lt;/h3>
&lt;p>次に、選ぶ方法を表した2進数を10進数へと変換させ、整数値にします。整数値と対応することで非常に扱いやすくなり、全探索がしやすくなります！&lt;/p>
&lt;p>例題の8通りの選び方について、2進数と10進数の整数値ではこのように表すことができます。&lt;/p>
&lt;figure>&lt;img src="image2.png"/>
&lt;/figure>
&lt;h3 id="bit全探索するためのfor文">
&lt;a href="#bit%e5%85%a8%e6%8e%a2%e7%b4%a2%e3%81%99%e3%82%8b%e3%81%9f%e3%82%81%e3%81%aefor%e6%96%87" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
bit全探索するためのfor文
&lt;/h3>
&lt;p>$2^N$ 個ある「いくつか選ぶ方法」を整数値 $0,1,2,&amp;hellip;,2^N-1$ にしたことでforループを用いて簡単に全探索することができます。bit全探索での以下の部分は「いくつか選ぶ方法」を整数値に対応付けて全探索を行っていることを表しているのです！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 「いくつか選ぶ方法」を整数値で表したものに対して処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>コード内の &lt;strong>&lt;code>1 &amp;lt;&amp;lt; N&lt;/code> は1をN桁左シフトした値 = $2^N$ のこと&lt;/strong>です。&lt;/li>
&lt;/ul>
&lt;h3 id="整数値2進数に変換し選ぶ方法を復元する">
&lt;a href="#%e6%95%b4%e6%95%b0%e5%80%a42%e9%80%b2%e6%95%b0%e3%81%ab%e5%a4%89%e6%8f%9b%e3%81%97%e9%81%b8%e3%81%b6%e6%96%b9%e6%b3%95%e3%82%92%e5%be%a9%e5%85%83%e3%81%99%e3%82%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
整数値→2進数に変換し、選ぶ方法を復元する
&lt;/h3>
&lt;p>「いくつか選ぶ方法」を整数値に対応させましたが、このままだとその整数が「どう選ぶことを意味しているのか」が分からないので、先程と逆のことを行い復元します。つまり、&lt;/p>
&lt;ul>
&lt;li>整数値 $0,1,2,&amp;hellip;,2^N-1$ を再び2進数で表す&lt;/li>
&lt;li>2進数で表される「いくつか選ぶ方法」において、 $1 \leq i \leq N$ を満たす $i$ について、「 $i$ 番目のものを選んだかどうか」を判定する&lt;/li>
&lt;/ul>
&lt;p>ことを行います。以下の部分は整数値から「いくつか選ぶ方法」を復元しているのです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bitのi桁目(i番目のもの)は1(選んだ)かどうか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 選んだものに対して処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>このif文は整数値 $0,1,2,&amp;hellip;,2^N-1$ それぞれについて、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>再び2進数で表したとき、 $i$ 桁目が1かどうか( $i$ 番目のものを選んだかどうか)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>を判定しています。&lt;/p>
&lt;p>例えば、$N=3,\text{bit} = 4$ のとき、&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code> はどのように判定を行うのか考えます。&lt;/p>
&lt;p>$\text{bit}$ を2進数で表すと $101_{(2)}$ になるので $i = 0,1,2$ のときの判定は以下の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>i&lt;/th>
&lt;th>&lt;code>(bit &amp;gt;&amp;gt; i)&lt;/code>&lt;/th>
&lt;th>&lt;code>((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code>&lt;/th>
&lt;th>判定&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>101&lt;/td>
&lt;td>101 &amp;amp; 001 = 001&lt;/td>
&lt;td>True&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>010&lt;/td>
&lt;td>010 &amp;amp; 001 = 000&lt;/td>
&lt;td>False&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>001&lt;/td>
&lt;td>001 &amp;amp; 001 = 001&lt;/td>
&lt;td>True&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>(bit &amp;gt;&amp;gt; i)&lt;/code>は2進数の $\text{bit}$ を $i$ 桁右シフトした値であり、これと $1$ をAND演算で判定をすることで&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$ \text{bit}$ の $i$ 桁目の値が1のとき、True&lt;/strong>&lt;/li>
&lt;li>&lt;strong>$ \text{bit}$ の $i$ 桁目の値が0のとき、False&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>となります。実際は $1$ とAND演算することにより最下位bitを残して全て0にできるので、&lt;/p>
&lt;ul>
&lt;li>$ \text{bit}$ の $i$ 桁右シフトした値の最下位bitが1なら、True (最下位bit以外の全ての桁は0)&lt;/li>
&lt;li>$ \text{bit}$ の $i$ 桁右シフトした値の最下位bitが0なら、False (全ての桁は0)&lt;/li>
&lt;/ul>
&lt;p>と判定していることになります。&lt;/p>
&lt;p>よって、「いくつか選ぶ方法」を復元するためには、以下のように先程の判定をforループで全てのものに対して行えば良いです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 選んだものに対して処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="実装">
&lt;a href="#%e5%ae%9f%e8%a3%85" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
実装
&lt;/h2>
&lt;p>長くなりましたが、最初の例題をbit全探索で実装すると以下の通りになります！&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// N: 何個のものについて考えているか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bit: 選び方の集合を表す整数値
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 3つの整数についてなので N = 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2^N通りの選び方を 0,1,2,...,2^N-1 の整数値に対応させ、全探索
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 2進数で表した「いくつか選ぶ方法」Sを求める
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 各iに対して
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bitのi桁目は1(選んだ)かどうか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 選んだならSに追加する
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 「いくつか選ぶ方法」Sの出力
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nl">v&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code>0:
1: 0
2: 1
3: 0 1
4: 2
5: 0 2
6: 1 2
7: 0 1 2
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code>は&lt;code>if(bit &amp;amp; (1 &amp;lt;&amp;lt; i))&lt;/code>と書くこともできますが、本質は同じです。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>実際の問題では配列Sを作成することはほとんどありませんが、その代わりに&lt;/p>
&lt;ul>
&lt;li>各 $i = 0, 1,\dots ,N-1$ に対して&lt;/li>
&lt;li>$i$ が2進数で表される「いくつか選ぶ方法」に含まれていることが分かったら&lt;/li>
&lt;li>それに応じた処理をその場で行う&lt;/li>
&lt;/ul>
&lt;p>という場合がほとんどです。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>また、他にも2進数のbitに対して頻出な判定の書き方は以下の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>判定&lt;/th>
&lt;th>書き方&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bitのi桁目が1かどうか&lt;br>(i番目を選んだかどうか)&lt;/td>
&lt;td>&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitのi桁目が1ではないかどうか&lt;br>(i番目を選んでいないかどうか)&lt;/td>
&lt;td>&lt;code>if(!((bit &amp;gt;&amp;gt; i) &amp;amp; 1))&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitの1の個数&lt;br>(選んだ個数)&lt;/td>
&lt;td>&lt;code>__builtin_popcount(bit)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="計算量について">
&lt;a href="#%e8%a8%88%e7%ae%97%e9%87%8f%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
計算量について
&lt;/h5>
&lt;p>この先、アルゴリズムを学んでいく上で避けては通れないのは &lt;strong>計算量&lt;/strong> の存在です。(計算量については今回は説明を省略します。)&lt;/p>
&lt;p>「いくつか選ぶ方法」というのは $2^N$ 通りありますが、すなわち $N$ の値が大きくなると「いくつか選ぶ方法」の数も爆発的に増加するということになります。具体的な処理にもよりますが、 &lt;strong>bit全探索が行えるのは $N \leq 20$ くらいの小さい $N$ が限界です。&lt;/strong> &lt;br>
計算量だと $O(N 2^N)$ となります。&lt;/p>
&lt;!-- ## 実践問題
一通りbit全探索について理解したところで1問、bit全探索で解いてみましょう。
### 部分和問題
https://algo-method.com/tasks/1083
> 【問題】&lt;br>
$N$ 個の整数 $A_0, A_1, \dots ,A_{N-1}$ と、整数 $V$ が与えられます。
これらの整数の中から、いくつかの整数を選んで総和をとります。 総和を $V$ にすることが可能かどうかを判定してください。&lt;br>
【制約】&lt;br>
> - $ 1\leq N\leq 16$
> - $1\leq V\leq 10^8$
> - $1\leq A_i\leq V (0 \leq i\leq N-1)$
>
部分和問題という超ド定番の問題です。これを今回はbit全探索を用いて解いていきましょう。 -->
&lt;h2 id="練習問題">
&lt;a href="#%e7%b7%b4%e7%bf%92%e5%95%8f%e9%a1%8c" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
練習問題
&lt;/h2>
&lt;p>bit全探索で解ける問題を置いておきます。 &lt;a href="https://jikky.notion.site/bit-6f60d4392c394b3fa4d49fdeb14c822a">bit全探索例題&lt;/a>&lt;/p>
&lt;h2 id="参考文献">
&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
参考文献
&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361">ビット演算 (bit 演算) の使い方を総特集！ 〜 マスクビットから bit DP まで 〜 - Qiita&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://drken1215.hatenablog.com/entry/2019/12/14/171657">&lt;strong>bit 全探索 - けんちょんの競プロ精進記録&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://algo-logic.info/rec-bit-search/">ビット全探索（ 2^n 通りの全探索） | アルゴリズムロジック&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://qiita.com/u2dayo/items/68e35815659b1041c3c2">こわくないbit全探索1 入門編: bit全探索ってなに？【競プロ解説】 - Qiita&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>bit全探索についてのお話。</title><link>https://jikky.dev/post/bit%E5%85%A8%E6%8E%A2%E7%B4%A2%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%8A%E8%A9%B1/</link><pubDate>Mon, 09 Jan 2023 08:36:58 +0900</pubDate><guid>https://jikky.dev/post/bit%E5%85%A8%E6%8E%A2%E7%B4%A2%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%8A%E8%A9%B1/</guid><description>
&lt;h2 id="概要">
&lt;a href="#%e6%a6%82%e8%a6%81" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
概要
&lt;/h2>
&lt;p>bit全探索とは、$N$ 個のものから「いくつか選ぶ方法」を全列挙して探索するアルゴリズムです。通常のforループでは全探索できない $2^N$ 通りを全探索できるようになります。&lt;/p>
&lt;p>&lt;strong>「いくつか選ぶ方法」の全列挙&lt;/strong>というのは &lt;strong>$N$ 個の各々について「選ぶ・選ばない」&lt;/strong> を全て列挙するということです。&lt;/p>
&lt;p>簡潔に言うと $N$ 個の要素を持つ集合 ${0,1,2,\dots,N-1}$ の部分集合の全列挙ができます。&lt;/p>
&lt;h2 id="例題">
&lt;a href="#%e4%be%8b%e9%a1%8c" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
例題
&lt;/h2>
&lt;p>例題を通して、どのように全探索を行うかを理解しましょう。&lt;/p>
&lt;blockquote>
&lt;p>【問題】&lt;br>
$N$ 個の整数 $A_1,A_2, \dots,A_N$ が与えられたとき、その中からいくつか選ぶ方法を列挙せよ。&lt;br>【制約】&lt;br>$N \leq 20$&lt;/p>
&lt;/blockquote>
&lt;p>この問題をforループで解こうとすると、$N$ 重のfor文が必要になります。また、 $N$ の値は変わるのでfor文の数を固定して書くことができません。&lt;/p>
&lt;p>より分かりやすいように先程の例題の $N=3$ のときの場合を考えます。&lt;/p>
&lt;blockquote>
&lt;p>【問題】&lt;br>
3個の整数 $0,1,2$ が与えられたとき、その中からいくつか選ぶ方法を列挙せよ。&lt;/p>
&lt;/blockquote>
&lt;p>数学が得意な方であれば $2^3 = 8$ 通りあることは容易に分かると思いますが、これはどのようにして導き出したのかを考えていきましょう。&lt;/p>
&lt;p>まず、3個ある整数ごとに選択肢として「選ぶ」「選ばない」の2通りが存在します。 $0,1,2$ について&lt;/p>
&lt;ul>
&lt;li>$0$ を選ぶ or $0$ を選ばない&lt;/li>
&lt;li>$1$ を選ぶ or $1$ を選ばない&lt;/li>
&lt;li>$2$ を選ぶ or $2$ を選ばない&lt;/li>
&lt;/ul>
&lt;p>が存在します。下図のとおり、 $2^3 = 8$ 通りあることになります。&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://jikky.dev/post/bit%E5%85%A8%E6%8E%A2%E7%B4%A2%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%8A%E8%A9%B1/image1.png"
alt="Untitled"
width=833
height="562" />&lt;/p>
&lt;p>この問題であれば3重のfor文でも全パターンを列挙することは出来ますが、bit全探索を行って全パターンを列挙してみましょう。&lt;/p>
&lt;h2 id="bit全探索の実装">
&lt;a href="#bit%e5%85%a8%e6%8e%a2%e7%b4%a2%e3%81%ae%e5%ae%9f%e8%a3%85" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
bit全探索の実装
&lt;/h2>
&lt;p>基本的にbit全探索を実装するときの方針は以下の通りです。&lt;/p>
&lt;p>こちらの表現を用いて説明します。&lt;/p>
&lt;ul>
&lt;li>「いくつか選ぶ方法」を2進数で表したものを&lt;strong>bit列&lt;/strong>&lt;/li>
&lt;li>bit列を10進数の整数値に置き換えたものを&lt;strong>整数値bit列&lt;/strong>&lt;/li>
&lt;/ul>
&lt;aside>
💡 方針
&lt;ol>
&lt;li>&lt;strong>いくつか選ぶ方法をbit列(2進数)で表し、bit列→整数値bit列に変換する&lt;/strong>&lt;/li>
&lt;li>&lt;strong>整数値bit列→bit列に変換し、選ぶ方法を復元する&lt;/strong>&lt;/li>
&lt;li>復元した選ぶ方法について処理を行う&lt;/li>
&lt;li>1-3を $2^N$ 通り全てに行う&lt;/li>
&lt;/ol>
&lt;/aside>
&lt;h3 id="いくつか選ぶ方法をbit列2進数で表す">
&lt;a href="#%e3%81%84%e3%81%8f%e3%81%a4%e3%81%8b%e9%81%b8%e3%81%b6%e6%96%b9%e6%b3%95%e3%82%92bit%e5%88%972%e9%80%b2%e6%95%b0%e3%81%a7%e8%a1%a8%e3%81%99" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
いくつか選ぶ方法をbit列(2進数)で表す
&lt;/h3>
&lt;p>はじめに、「いくつか選ぶ方法」をbit列で表す方法を考えます。&lt;/p>
&lt;p>例えば、 ${0,1,2}$ に対して${1,2}$ を選ぶ方法は ${0,1,2}$ の1番目である $0$ は選ばず、2番目、3番目である $1,2$ を選んでいるので、$N$ 桁のbit列で $011_{(2)}$ と表せます。&lt;/p>
&lt;p>つまり、これだけで「いくつか選ぶ方法」bit列で表すことができます。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$i$ 番目のものを選ぶなら、bit列の $i$ 桁目を1にする&lt;/strong>&lt;/li>
&lt;li>&lt;strong>$i$ 番目のものを選ばないなら、bit列の $i$ 桁目を0にする&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="bit列整数値bit列に変換する">
&lt;a href="#bit%e5%88%97%e6%95%b4%e6%95%b0%e5%80%a4bit%e5%88%97%e3%81%ab%e5%a4%89%e6%8f%9b%e3%81%99%e3%82%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
bit列→整数値bit列に変換する
&lt;/h3>
&lt;p>次に、選ぶ方法を表したbit列を10進数に直して整数値bit列に変換します。 これにより、整数値と選び方を対応させることができ、非常に扱いやすくなります！&lt;/p>
&lt;p>例題の8つの選び方について、bit列と整数値bit列ではこのように表すことができます。&lt;/p>
&lt;p>&lt;img loading="lazy"
src="https://jikky.dev/post/bit%E5%85%A8%E6%8E%A2%E7%B4%A2%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%8A%E8%A9%B1/image2.png"
alt="Untitled"
width=1541
height="561" />&lt;/p>
&lt;h3 id="bit全探索するためのfor文">
&lt;a href="#bit%e5%85%a8%e6%8e%a2%e7%b4%a2%e3%81%99%e3%82%8b%e3%81%9f%e3%82%81%e3%81%aefor%e6%96%87" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
bit全探索するためのfor文
&lt;/h3>
&lt;p>$2^N$ 個ある整数値bit列 $0,1,2,&amp;hellip;,2^N-1$ までをfor文を用いて全探索します。&lt;/p>
&lt;p>先程、整数値と選び方を対応させたことにより、forループで「いくつか選ぶ方法」を全て探索することができるようになりました。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 整数値bitで表した集合に対して、処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>コード内の &lt;strong>&lt;code>1 &amp;lt;&amp;lt; N&lt;/code> は1をN桁左シフトした値 = $2^N$ のこと&lt;/strong>です。&lt;/li>
&lt;/ul>
&lt;h3 id="整数値bit列bit列に変換し選ぶ方法を復元する">
&lt;a href="#%e6%95%b4%e6%95%b0%e5%80%a4bit%e5%88%97bit%e5%88%97%e3%81%ab%e5%a4%89%e6%8f%9b%e3%81%97%e9%81%b8%e3%81%b6%e6%96%b9%e6%b3%95%e3%82%92%e5%be%a9%e5%85%83%e3%81%99%e3%82%8b" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
整数値bit列→bit列に変換し、選ぶ方法を復元する
&lt;/h3>
&lt;p>「いくつか選ぶ方法」を整数値に対応させましたが、このままだとその整数が「どう選ぶことを意味しているのか」がわからないので、先程と逆のことを行い復元します。つまり、&lt;/p>
&lt;ul>
&lt;li>整数値bit列 $0,1,2,&amp;hellip;,2^N-1$ を再びbit列で表す&lt;/li>
&lt;li>bit列で表される「選び方」において、「i番目を選んだかどうか」を判定する&lt;/li>
&lt;/ul>
&lt;p>ことを行います。以下のコードによって整数値bit列から「いくつか選ぶ方法」を復元しているのです。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 復元処理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bitのi桁目(i番目のもの)は1(選んだ)かどうか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 選んだものに対して処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>このif文は整数値bit列 $0,1,2,&amp;hellip;,2^N-1$ それぞれについて、&lt;/p>
&lt;ul>
&lt;li>&lt;strong>再びbit列で表したとき、 $i$ 桁目が1かどうか( $i$ 番目のものを選んだかどうか)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>を判定しています。&lt;/p>
&lt;p>例えば、$N=3,\text{bit} = 4$ のとき、&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code> はどのように判定を行うのか考えます。&lt;/p>
&lt;p>$\text{bit}$ を2進数で表すと $101_{(2)}$ になる、$i = 0,1,2$ のときの判定は以下の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>i&lt;/th>
&lt;th>(bit &amp;raquo; i)&lt;/th>
&lt;th>(bit &amp;raquo; i) &amp;amp; 1)&lt;/th>
&lt;th>判定&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>101&lt;/td>
&lt;td>101 &amp;amp; 001=001&lt;/td>
&lt;td>True&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>010&lt;/td>
&lt;td>010 &amp;amp; 001=000&lt;/td>
&lt;td>False&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>001&lt;/td>
&lt;td>001 &amp;amp; 001=001&lt;/td>
&lt;td>True&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>(bit &amp;gt;&amp;gt; i)&lt;/code>は $\text{bit}$ を $i$ 桁右シフトした値であり、これと $1$ をAND演算で判定をすることで&lt;/p>
&lt;ul>
&lt;li>&lt;strong>$ \text{bit}$ の $i$ 桁目の値が1のとき、True&lt;/strong>&lt;/li>
&lt;li>&lt;strong>$ \text{bit}$ の $i$ 桁目の値が0のとき、False&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>となります。$1$ は最下位bit以外全て0になっているので、AND演算によって最下位bitを残して全て0にします。ですので実際は&lt;/p>
&lt;ul>
&lt;li>bitの $i$ 桁右シフトした値の最下位bitが1なら、True (最下位Bit以外の桁は0)&lt;/li>
&lt;li>bitの $i$ 桁右シフトした値の最下位bitが0なら、False (全ての桁は0)&lt;/li>
&lt;/ul>
&lt;p>と判定していることになります。&lt;/p>
&lt;p>bitに対して、頻出な判定の書き方は以下の通りです。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>判定&lt;/th>
&lt;th>書き方&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bitのi桁目が1かどうか(i番目を選んだかどうか)&lt;/td>
&lt;td>&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitのi桁目が1ではないかどうか(i番目を選んでいないかどうか)&lt;/td>
&lt;td>&lt;code>if(!((bit &amp;gt;&amp;gt; i) &amp;amp; 1))&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitの1の個数(選んだ個数)&lt;/td>
&lt;td>&lt;code>__builtin_popcount(bit)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="実装">
&lt;a href="#%e5%ae%9f%e8%a3%85" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
実装
&lt;/h2>
&lt;p>例題の実装は以下の通りです。 $N$ の値を変えればどのような場合でも対応できます。&lt;/p>
&lt;h2 id="計算量">
&lt;a href="#%e8%a8%88%e7%ae%97%e9%87%8f" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
計算量
&lt;/h2>
&lt;p>$O(N2^N)$&lt;br>
$N \leq 20$ くらいなら間に合います。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// N: 何個のものについて考えているか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// bit: 選び方の集合を表す整数値
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">N&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2^N通りの選び方を 0,1,2,...,2^N-1 の整数値に対応
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">bit&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* bitで表した集合に対して、処理 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bitで表した集合Sを求める
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 各iに対して
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bitのi桁目は1(選んだ)かどうか
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">S&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push_back&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bitで表した集合Sの出力
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">bit&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nl">v&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">S&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">v&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre tabindex="0">&lt;code>0:
1: 0
2: 1
3: 0 1
4: 2
5: 0 2
6: 1 2
7: 0 1 2
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>&lt;code>if((bit &amp;gt;&amp;gt; i) &amp;amp; 1)&lt;/code>は&lt;code>if(bit &amp;amp; (1 &amp;lt;&amp;lt; i)&lt;/code>と書くこともできますが、本質は同じです。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>実際の問題では配列Sを作成することはほとんどありません。その代わり&lt;/p>
&lt;ul>
&lt;li>各 $i = 0, 1,\dots$に対して&lt;/li>
&lt;li>$i$ がbitで表される集合に含まれることが分かったら&lt;/li>
&lt;li>それに応じた処理をその場で行う&lt;/li>
&lt;/ul>
&lt;p>という場合がほとんどです。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="練習問題">
&lt;a href="#%e7%b7%b4%e7%bf%92%e5%95%8f%e9%a1%8c" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
練習問題
&lt;/h2>
&lt;p>bit全探索で解ける問題を置いておきます。 &lt;a href="https://jikky.notion.site/bit-6f60d4392c394b3fa4d49fdeb14c822a">bit全探索例題&lt;/a>&lt;/p>
&lt;h2 id="参考文献">
&lt;a href="#%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae" class="anchor">
&lt;svg class="icon" aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16">
&lt;path fill-rule="evenodd"
d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
&lt;/path>
&lt;/svg>
&lt;/a>
参考文献
&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://qiita.com/drken/items/7c6ff2aa4d8fce1c9361">ビット演算 (bit 演算) の使い方を総特集！ 〜 マスクビットから bit DP まで 〜 - Qiita&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://drken1215.hatenablog.com/entry/2019/12/14/171657">&lt;strong>bit 全探索 - けんちょんの競プロ精進記録&lt;/strong>&lt;/a>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://algo-logic.info/rec-bit-search/">ビット全探索（ 2^n 通りの全探索） | アルゴリズムロジック&lt;/a>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://qiita.com/u2dayo/items/68e35815659b1041c3c2">こわくないbit全探索1 入門編: bit全探索ってなに？【競プロ解説】 - Qiita&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul></description></item></channel></rss>